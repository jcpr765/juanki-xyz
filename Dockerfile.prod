# Dockerfile taken from multi-stage dockerfile example from Vercel https://nextjs.org/docs/deployment#docker-image

# Install dependencies only when needed
FROM node:alpine AS deps

# Uncomment in libc6-compat is needed
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
# RUN apk add --no-cache libc6-compat

# Set the working directory in this image
WORKDIR /app

# Copy over the package and package lock files
COPY package.json package-lock.json ./

# Install the packages
RUN npm ci

# Rebuild the source code only when needed
FROM node:alpine AS builder

# Set the working directory
WORKDIR /app

# Copy over all files
COPY . .

# Copy the node modules from the resulting installation in the previous step
COPY --from=deps /app/node_modules ./node_modules

# Build the production-ready version of the app
RUN npm run build

# Production image, copy all the files and run next
FROM node:alpine AS runner

# Set the working directory
WORKDIR /app

# Set the NODE_ENV environment variable to production
ENV NODE_ENV production

RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# You only need to copy next.config.js if you are NOT using the default configuration
# COPY --from=builder /app/next.config.js ./
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

USER nextjs

EXPOSE 3000

# Next.js collects completely anonymous telemetry data about general usage.
# Learn more here: https://nextjs.org/telemetry
# Uncomment the following line in case you want to disable telemetry.
# ENV NEXT_TELEMETRY_DISABLED 1

CMD ["npm", "run", "start"]